version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: cdc_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root --password=rootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      --server-id=223344
      --log-bin=mysql-bin
      --binlog-format=ROW
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
      --binlog-row-image=FULL
      --binlog_checksum=NONE


  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  debezium:
    image: debezium/connect:2.5
    container_name: debezium
    restart: unless-stopped
    depends_on:
      - kafka
      - mysql
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "connect-cluster"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      CONNECTOR_JAR_PATH: /kafka/connectors
      DEBEZIUM_MYSQL_ENABLED: "true"
      DEBEZIUM_MYSQL_CONNECTOR_VERSION: "2.5"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      MYSQL_HOSTNAME: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    ports:
      - "8083:8083"
    volumes:
      - ./kafka/debezium_mysql_connector.json:/kafka/connectors/debezium_mysql_connector.json
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/connectors || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local-kafka"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: "local-connect"
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: "http://debezium:8083"
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - debezium

  spark-master:
    image: bitnami/spark:3.4
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - AZURE_STORAGE_KEY=${AZURE_STORAGE_KEY}
    ports:
      - "8080:8080"
    volumes:
      - ./spark/conf:/opt/spark/conf
      - ./spark/jobs:/opt/spark/jobs

  spark-worker:
    image: bitnami/spark:3.4
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - AZURE_STORAGE_KEY=${AZURE_STORAGE_KEY}
    volumes:
      - ./spark/conf:/opt/spark/conf
      - ./spark/jobs/kafka_to_azure.py:/opt/spark/jobs/kafka_to_azure.py


  webserver:
    image: apache/airflow:2.6.0-python3.9
    container_name: webserver
    entrypoint: ['/opt/airflow/script/entrypoint.sh']
    depends_on:
      - postgres
      - debezium
      - spark-master
    environment:
      - LOAD_EX=n
      - EXECUTOR=Sequential
      - AIRFLOW__LOG__HOST=localhost 
      - ARIFLOW__LOGGING__CREATE_SYMLINK='False'
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=this_is_a_very_secured_key
      - AZURE_STORAGE_KEY= ${AZURE_STORAGE_KEY}

    logging:
      options:  
        max-size: 10m
        max-file: "3"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./kafka/debezium_mysql_connector.json:/opt/airflow/kafka/debezium_mysql_connector.json
      - ./spark/jobs/kafka_to_azure.py:/opt/spark/jobs/kafka_to_azure.py
      - ./spark/conf:/opt/spark/conf
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8081:8080"
      - "8793:8793"
    healthcheck:
      test: ['CMD-SHELL', "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3

  scheduler:
    image: apache/airflow:2.6.0-python3.9
    depends_on:
      - webserver
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./kafka/debezium_mysql_connector.json:/opt/airflow/kafka/debezium_mysql_connector.json
      - ./spark/jobs/kafka_to_azure.py:/opt/spark/jobs/kafka_to_azure.py
      - ./spark/conf:/opt/spark/conf
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOAD_EX=n
      - EXECUTOR=Sequential
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=this_is_a_very_secured_key
      - AZURE_STORAGE_KEY=${AZURE_STORAGE_KEY}

    command: bash -c "pip install -r ./requirements.txt && airflow db upgrade && airflow scheduler"

  postgres:
    image: postgres:14.0
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    logging:
      options:
        max-size: 10m
        max-file: "3"

volumes:
  mysql_data:
  kafka_data:
  airflow_logs:

networks:
  default:
    name: cdc_pipeline_net